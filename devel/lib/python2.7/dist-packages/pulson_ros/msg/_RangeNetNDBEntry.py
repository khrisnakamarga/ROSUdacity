# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pulson_ros/RangeNetNDBEntry.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RangeNetNDBEntry(genpy.Message):
  _md5sum = "3ea217cb13c698c1f1001d8eec88468e"
  _type = "pulson_ros/RangeNetNDBEntry"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 node_id

uint8 range_status
uint8 antenna_mode

uint16 stopwatch_time

uint32 range
uint16 range_error

uint16 range_velocity

uint8 range_measurement_type

uint8 flags

uint32 stats_age_ms

uint32 range_update_timestamp_ms
uint32 last_heard_timestamp_ms
uint32 added_to_ndb_timestamp_ms
"""
  __slots__ = ['node_id','range_status','antenna_mode','stopwatch_time','range','range_error','range_velocity','range_measurement_type','flags','stats_age_ms','range_update_timestamp_ms','last_heard_timestamp_ms','added_to_ndb_timestamp_ms']
  _slot_types = ['uint32','uint8','uint8','uint16','uint32','uint16','uint16','uint8','uint8','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node_id,range_status,antenna_mode,stopwatch_time,range,range_error,range_velocity,range_measurement_type,flags,stats_age_ms,range_update_timestamp_ms,last_heard_timestamp_ms,added_to_ndb_timestamp_ms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RangeNetNDBEntry, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.node_id is None:
        self.node_id = 0
      if self.range_status is None:
        self.range_status = 0
      if self.antenna_mode is None:
        self.antenna_mode = 0
      if self.stopwatch_time is None:
        self.stopwatch_time = 0
      if self.range is None:
        self.range = 0
      if self.range_error is None:
        self.range_error = 0
      if self.range_velocity is None:
        self.range_velocity = 0
      if self.range_measurement_type is None:
        self.range_measurement_type = 0
      if self.flags is None:
        self.flags = 0
      if self.stats_age_ms is None:
        self.stats_age_ms = 0
      if self.range_update_timestamp_ms is None:
        self.range_update_timestamp_ms = 0
      if self.last_heard_timestamp_ms is None:
        self.last_heard_timestamp_ms = 0
      if self.added_to_ndb_timestamp_ms is None:
        self.added_to_ndb_timestamp_ms = 0
    else:
      self.node_id = 0
      self.range_status = 0
      self.antenna_mode = 0
      self.stopwatch_time = 0
      self.range = 0
      self.range_error = 0
      self.range_velocity = 0
      self.range_measurement_type = 0
      self.flags = 0
      self.stats_age_ms = 0
      self.range_update_timestamp_ms = 0
      self.last_heard_timestamp_ms = 0
      self.added_to_ndb_timestamp_ms = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2BHI2H2B4I().pack(_x.node_id, _x.range_status, _x.antenna_mode, _x.stopwatch_time, _x.range, _x.range_error, _x.range_velocity, _x.range_measurement_type, _x.flags, _x.stats_age_ms, _x.range_update_timestamp_ms, _x.last_heard_timestamp_ms, _x.added_to_ndb_timestamp_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.node_id, _x.range_status, _x.antenna_mode, _x.stopwatch_time, _x.range, _x.range_error, _x.range_velocity, _x.range_measurement_type, _x.flags, _x.stats_age_ms, _x.range_update_timestamp_ms, _x.last_heard_timestamp_ms, _x.added_to_ndb_timestamp_ms,) = _get_struct_I2BHI2H2B4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2BHI2H2B4I().pack(_x.node_id, _x.range_status, _x.antenna_mode, _x.stopwatch_time, _x.range, _x.range_error, _x.range_velocity, _x.range_measurement_type, _x.flags, _x.stats_age_ms, _x.range_update_timestamp_ms, _x.last_heard_timestamp_ms, _x.added_to_ndb_timestamp_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.node_id, _x.range_status, _x.antenna_mode, _x.stopwatch_time, _x.range, _x.range_error, _x.range_velocity, _x.range_measurement_type, _x.flags, _x.stats_age_ms, _x.range_update_timestamp_ms, _x.last_heard_timestamp_ms, _x.added_to_ndb_timestamp_ms,) = _get_struct_I2BHI2H2B4I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2BHI2H2B4I = None
def _get_struct_I2BHI2H2B4I():
    global _struct_I2BHI2H2B4I
    if _struct_I2BHI2H2B4I is None:
        _struct_I2BHI2H2B4I = struct.Struct("<I2BHI2H2B4I")
    return _struct_I2BHI2H2B4I
