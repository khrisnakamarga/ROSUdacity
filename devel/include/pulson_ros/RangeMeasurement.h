// Generated by gencpp from file pulson_ros/RangeMeasurement.msg
// DO NOT EDIT!


#ifndef PULSON_ROS_MESSAGE_RANGEMEASUREMENT_H
#define PULSON_ROS_MESSAGE_RANGEMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pulson_ros
{
template <class ContainerAllocator>
struct RangeMeasurement_
{
  typedef RangeMeasurement_<ContainerAllocator> Type;

  RangeMeasurement_()
    : header()
    , message_id(0)
    , responder_id(0)
    , range_status(0)
    , antenna_mode(0)
    , stopwatch_time(0)
    , precision_range(0)
    , coarse_range(0)
    , filtered_range(0)
    , precision_range_error(0)
    , coarse_range_error(0)
    , filtered_range_error(0)
    , filtered_velocity(0)
    , filtered_velocity_error(0)
    , timestamp(0)  {
    }
  RangeMeasurement_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_id(0)
    , responder_id(0)
    , range_status(0)
    , antenna_mode(0)
    , stopwatch_time(0)
    , precision_range(0)
    , coarse_range(0)
    , filtered_range(0)
    , precision_range_error(0)
    , coarse_range_error(0)
    , filtered_range_error(0)
    , filtered_velocity(0)
    , filtered_velocity_error(0)
    , timestamp(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _message_id_type;
  _message_id_type message_id;

   typedef uint32_t _responder_id_type;
  _responder_id_type responder_id;

   typedef uint8_t _range_status_type;
  _range_status_type range_status;

   typedef uint8_t _antenna_mode_type;
  _antenna_mode_type antenna_mode;

   typedef uint16_t _stopwatch_time_type;
  _stopwatch_time_type stopwatch_time;

   typedef uint32_t _precision_range_type;
  _precision_range_type precision_range;

   typedef uint32_t _coarse_range_type;
  _coarse_range_type coarse_range;

   typedef uint32_t _filtered_range_type;
  _filtered_range_type filtered_range;

   typedef uint16_t _precision_range_error_type;
  _precision_range_error_type precision_range_error;

   typedef uint16_t _coarse_range_error_type;
  _coarse_range_error_type coarse_range_error;

   typedef uint16_t _filtered_range_error_type;
  _filtered_range_error_type filtered_range_error;

   typedef int16_t _filtered_velocity_type;
  _filtered_velocity_type filtered_velocity;

   typedef uint16_t _filtered_velocity_error_type;
  _filtered_velocity_error_type filtered_velocity_error;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;




  typedef boost::shared_ptr< ::pulson_ros::RangeMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pulson_ros::RangeMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct RangeMeasurement_

typedef ::pulson_ros::RangeMeasurement_<std::allocator<void> > RangeMeasurement;

typedef boost::shared_ptr< ::pulson_ros::RangeMeasurement > RangeMeasurementPtr;
typedef boost::shared_ptr< ::pulson_ros::RangeMeasurement const> RangeMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pulson_ros::RangeMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pulson_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'pulson_ros': ['/home/robond/catkin_ws/src/pulson_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pulson_ros::RangeMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pulson_ros::RangeMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pulson_ros::RangeMeasurement_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6487848ea565e546d9907169ef6fc53e";
  }

  static const char* value(const ::pulson_ros::RangeMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6487848ea565e546ULL;
  static const uint64_t static_value2 = 0xd9907169ef6fc53eULL;
};

template<class ContainerAllocator>
struct DataType< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pulson_ros/RangeMeasurement";
  }

  static const char* value(const ::pulson_ros::RangeMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint16 message_id\n\
uint32 responder_id\n\
\n\
uint8 range_status\n\
uint8 antenna_mode\n\
\n\
uint16 stopwatch_time\n\
\n\
uint32 precision_range\n\
uint32 coarse_range\n\
uint32 filtered_range\n\
\n\
uint16 precision_range_error\n\
uint16 coarse_range_error\n\
uint16 filtered_range_error\n\
\n\
int16 filtered_velocity\n\
uint16 filtered_velocity_error\n\
\n\
uint32 timestamp\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::pulson_ros::RangeMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_id);
      stream.next(m.responder_id);
      stream.next(m.range_status);
      stream.next(m.antenna_mode);
      stream.next(m.stopwatch_time);
      stream.next(m.precision_range);
      stream.next(m.coarse_range);
      stream.next(m.filtered_range);
      stream.next(m.precision_range_error);
      stream.next(m.coarse_range_error);
      stream.next(m.filtered_range_error);
      stream.next(m.filtered_velocity);
      stream.next(m.filtered_velocity_error);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RangeMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pulson_ros::RangeMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pulson_ros::RangeMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.message_id);
    s << indent << "responder_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.responder_id);
    s << indent << "range_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.range_status);
    s << indent << "antenna_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.antenna_mode);
    s << indent << "stopwatch_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stopwatch_time);
    s << indent << "precision_range: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.precision_range);
    s << indent << "coarse_range: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.coarse_range);
    s << indent << "filtered_range: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.filtered_range);
    s << indent << "precision_range_error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.precision_range_error);
    s << indent << "coarse_range_error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.coarse_range_error);
    s << indent << "filtered_range_error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.filtered_range_error);
    s << indent << "filtered_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.filtered_velocity);
    s << indent << "filtered_velocity_error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.filtered_velocity_error);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PULSON_ROS_MESSAGE_RANGEMEASUREMENT_H
