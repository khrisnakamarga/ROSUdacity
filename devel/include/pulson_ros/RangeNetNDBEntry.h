// Generated by gencpp from file pulson_ros/RangeNetNDBEntry.msg
// DO NOT EDIT!


#ifndef PULSON_ROS_MESSAGE_RANGENETNDBENTRY_H
#define PULSON_ROS_MESSAGE_RANGENETNDBENTRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pulson_ros
{
template <class ContainerAllocator>
struct RangeNetNDBEntry_
{
  typedef RangeNetNDBEntry_<ContainerAllocator> Type;

  RangeNetNDBEntry_()
    : node_id(0)
    , range_status(0)
    , antenna_mode(0)
    , stopwatch_time(0)
    , range(0)
    , range_error(0)
    , range_velocity(0)
    , range_measurement_type(0)
    , flags(0)
    , stats_age_ms(0)
    , range_update_timestamp_ms(0)
    , last_heard_timestamp_ms(0)
    , added_to_ndb_timestamp_ms(0)  {
    }
  RangeNetNDBEntry_(const ContainerAllocator& _alloc)
    : node_id(0)
    , range_status(0)
    , antenna_mode(0)
    , stopwatch_time(0)
    , range(0)
    , range_error(0)
    , range_velocity(0)
    , range_measurement_type(0)
    , flags(0)
    , stats_age_ms(0)
    , range_update_timestamp_ms(0)
    , last_heard_timestamp_ms(0)
    , added_to_ndb_timestamp_ms(0)  {
  (void)_alloc;
    }



   typedef uint32_t _node_id_type;
  _node_id_type node_id;

   typedef uint8_t _range_status_type;
  _range_status_type range_status;

   typedef uint8_t _antenna_mode_type;
  _antenna_mode_type antenna_mode;

   typedef uint16_t _stopwatch_time_type;
  _stopwatch_time_type stopwatch_time;

   typedef uint32_t _range_type;
  _range_type range;

   typedef uint16_t _range_error_type;
  _range_error_type range_error;

   typedef uint16_t _range_velocity_type;
  _range_velocity_type range_velocity;

   typedef uint8_t _range_measurement_type_type;
  _range_measurement_type_type range_measurement_type;

   typedef uint8_t _flags_type;
  _flags_type flags;

   typedef uint32_t _stats_age_ms_type;
  _stats_age_ms_type stats_age_ms;

   typedef uint32_t _range_update_timestamp_ms_type;
  _range_update_timestamp_ms_type range_update_timestamp_ms;

   typedef uint32_t _last_heard_timestamp_ms_type;
  _last_heard_timestamp_ms_type last_heard_timestamp_ms;

   typedef uint32_t _added_to_ndb_timestamp_ms_type;
  _added_to_ndb_timestamp_ms_type added_to_ndb_timestamp_ms;




  typedef boost::shared_ptr< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> const> ConstPtr;

}; // struct RangeNetNDBEntry_

typedef ::pulson_ros::RangeNetNDBEntry_<std::allocator<void> > RangeNetNDBEntry;

typedef boost::shared_ptr< ::pulson_ros::RangeNetNDBEntry > RangeNetNDBEntryPtr;
typedef boost::shared_ptr< ::pulson_ros::RangeNetNDBEntry const> RangeNetNDBEntryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pulson_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'pulson_ros': ['/home/robond/catkin_ws/src/pulson_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ea217cb13c698c1f1001d8eec88468e";
  }

  static const char* value(const ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ea217cb13c698c1ULL;
  static const uint64_t static_value2 = 0xf1001d8eec88468eULL;
};

template<class ContainerAllocator>
struct DataType< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pulson_ros/RangeNetNDBEntry";
  }

  static const char* value(const ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 node_id\n\
\n\
uint8 range_status\n\
uint8 antenna_mode\n\
\n\
uint16 stopwatch_time\n\
\n\
uint32 range\n\
uint16 range_error\n\
\n\
uint16 range_velocity\n\
\n\
uint8 range_measurement_type\n\
\n\
uint8 flags\n\
\n\
uint32 stats_age_ms\n\
\n\
uint32 range_update_timestamp_ms\n\
uint32 last_heard_timestamp_ms\n\
uint32 added_to_ndb_timestamp_ms\n\
";
  }

  static const char* value(const ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_id);
      stream.next(m.range_status);
      stream.next(m.antenna_mode);
      stream.next(m.stopwatch_time);
      stream.next(m.range);
      stream.next(m.range_error);
      stream.next(m.range_velocity);
      stream.next(m.range_measurement_type);
      stream.next(m.flags);
      stream.next(m.stats_age_ms);
      stream.next(m.range_update_timestamp_ms);
      stream.next(m.last_heard_timestamp_ms);
      stream.next(m.added_to_ndb_timestamp_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RangeNetNDBEntry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator>& v)
  {
    s << indent << "node_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.node_id);
    s << indent << "range_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.range_status);
    s << indent << "antenna_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.antenna_mode);
    s << indent << "stopwatch_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stopwatch_time);
    s << indent << "range: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.range);
    s << indent << "range_error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_error);
    s << indent << "range_velocity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.range_velocity);
    s << indent << "range_measurement_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.range_measurement_type);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    s << indent << "stats_age_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.stats_age_ms);
    s << indent << "range_update_timestamp_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.range_update_timestamp_ms);
    s << indent << "last_heard_timestamp_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.last_heard_timestamp_ms);
    s << indent << "added_to_ndb_timestamp_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.added_to_ndb_timestamp_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PULSON_ROS_MESSAGE_RANGENETNDBENTRY_H
