// Generated by gencpp from file pulson_ros/RangeNetNDB.msg
// DO NOT EDIT!


#ifndef PULSON_ROS_MESSAGE_RANGENETNDB_H
#define PULSON_ROS_MESSAGE_RANGENETNDB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pulson_ros/RangeNetNDBEntry.h>

namespace pulson_ros
{
template <class ContainerAllocator>
struct RangeNetNDB_
{
  typedef RangeNetNDB_<ContainerAllocator> Type;

  RangeNetNDB_()
    : header()
    , host_node(0)
    , message_id(0)
    , number_of_neighbor_entries(0)
    , database()  {
    }
  RangeNetNDB_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , host_node(0)
    , message_id(0)
    , number_of_neighbor_entries(0)
    , database(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _host_node_type;
  _host_node_type host_node;

   typedef uint16_t _message_id_type;
  _message_id_type message_id;

   typedef uint8_t _number_of_neighbor_entries_type;
  _number_of_neighbor_entries_type number_of_neighbor_entries;

   typedef std::vector< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >::other >  _database_type;
  _database_type database;




  typedef boost::shared_ptr< ::pulson_ros::RangeNetNDB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pulson_ros::RangeNetNDB_<ContainerAllocator> const> ConstPtr;

}; // struct RangeNetNDB_

typedef ::pulson_ros::RangeNetNDB_<std::allocator<void> > RangeNetNDB;

typedef boost::shared_ptr< ::pulson_ros::RangeNetNDB > RangeNetNDBPtr;
typedef boost::shared_ptr< ::pulson_ros::RangeNetNDB const> RangeNetNDBConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pulson_ros::RangeNetNDB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pulson_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'pulson_ros': ['/home/robond/catkin_ws/src/pulson_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pulson_ros::RangeNetNDB_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pulson_ros::RangeNetNDB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pulson_ros::RangeNetNDB_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e383cdc325496d8c4ee7600a42ab6f0e";
  }

  static const char* value(const ::pulson_ros::RangeNetNDB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe383cdc325496d8cULL;
  static const uint64_t static_value2 = 0x4ee7600a42ab6f0eULL;
};

template<class ContainerAllocator>
struct DataType< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pulson_ros/RangeNetNDB";
  }

  static const char* value(const ::pulson_ros::RangeNetNDB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint32 host_node\n\
uint16 message_id\n\
uint8 number_of_neighbor_entries\n\
\n\
pulson_ros/RangeNetNDBEntry[] database\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pulson_ros/RangeNetNDBEntry\n\
uint32 node_id\n\
\n\
uint8 range_status\n\
uint8 antenna_mode\n\
\n\
uint16 stopwatch_time\n\
\n\
uint32 range\n\
uint16 range_error\n\
\n\
uint16 range_velocity\n\
\n\
uint8 range_measurement_type\n\
\n\
uint8 flags\n\
\n\
uint32 stats_age_ms\n\
\n\
uint32 range_update_timestamp_ms\n\
uint32 last_heard_timestamp_ms\n\
uint32 added_to_ndb_timestamp_ms\n\
";
  }

  static const char* value(const ::pulson_ros::RangeNetNDB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.host_node);
      stream.next(m.message_id);
      stream.next(m.number_of_neighbor_entries);
      stream.next(m.database);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RangeNetNDB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pulson_ros::RangeNetNDB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pulson_ros::RangeNetNDB_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "host_node: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.host_node);
    s << indent << "message_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.message_id);
    s << indent << "number_of_neighbor_entries: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_of_neighbor_entries);
    s << indent << "database[]" << std::endl;
    for (size_t i = 0; i < v.database.size(); ++i)
    {
      s << indent << "  database[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pulson_ros::RangeNetNDBEntry_<ContainerAllocator> >::stream(s, indent + "    ", v.database[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PULSON_ROS_MESSAGE_RANGENETNDB_H
